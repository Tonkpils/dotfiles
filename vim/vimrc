set nocompatible				" essential
set t_Co=256 					" Enable 256 colors

execute pathogen#infect()

colorscheme molokai

" Never let vim write a backup file
set nobackup
set noswapfile

" WhiteSpace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

if has("autocmd")
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  autocmd FileType python set tabstop=4 |set shiftwidth=4|set expandtab
  autocmd FileType ruby setlocal shiftwidth=2 tabstop=2 softtabstop=2 |set expandtab
  autocmd FileType c setlocal shiftwidth=2 tabstop=2 expandtab
  autocmd FileType make set noexpandtab shiftwidth=2 tabstop=2 syntax=nasm
  autocmd FileType java set shiftwidth=2 tabstop=2 softtabstop=2 |set expandtab
  autocmd FileType html set shiftwidth=2
  autocmd Filetype eruby set shiftwidth=2
  " NERDTree
  " Close vim if NERDTree is the only window left open
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  " White space madness
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call  clearmatches()
  autocmd BufWritePre * :call TrimWhiteSpace()
endif

" Mappings
"
let mapleader = "\<Space>" 						" Remap leader to '<Space>'
nnoremap <Leader>w :w<CR>
map <C-c> :NERDTreeToggle<CR>
map <C-l> :tabn<CR>
map <C-h> :tabp<CR>
map <C-n> :tabnew<CR>
map <leader>tt :tabnew<cr>
" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
" Insert Mode Maps
"
" ^F to insert file's name
imap <C-F> <C-R>=expand("%")<CR>

if executable("ack")
  set grepprg=ack\ -H\ --nogroup\ --ignore-dir=tmp\ --ignore-dir=coverage
endif

" Line numbers
set number
set numberwidth=4

" Airline Plugin
let g:airline_section_b = '%{fugitive#statusline()}'
let g:airline#extensions#tabline#enabled = 1

" Go shortcuts
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)

" SuperTab Completion Plugin
let g:SuperTabDefaultCompletionType = "context"

" Vim-Go
let g:go_fmt_command = "goimports"
" Can't use this following option with goimports :(
" let g:go_fmt_options = "-s"

" TagBar Plugin
nmap <F4> :TagbarToggle<CR>

