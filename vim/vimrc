set nocompatible				" essential

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" defaults everyone can agree on
Plugin 'tpope/vim-sensible'
" lean & mean status/tabline for vim
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" a git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'
" a GitHub extension for fugitive
Plugin 'tpope/vim-rhubarb'
" shows git diff in the gutter
Plugin 'airblade/vim-gitgutter'
" tree explorer
Plugin 'scrooloose/nerdtree'
" syntax checking hacks
Plugin 'scrooloose/syntastic'
" multiple selection Sublime style
Plugin 'terryma/vim-multiple-cursors'
" granular project configuration
Plugin 'tpope/vim-projectionist'
" quoting/parenthesizing made simple
Plugin 'tpope/vim-surround'
" helpers for UNIX
Plugin 'tpope/vim-eunuch'
" fuzzy file, buffer, mru, tag, etc finder
Plugin 'ctrlpvim/ctrlp.vim'
" perform all your vim insert mode completions with Tab
Plugin 'ervandew/supertab'
" navigate files at the speed of Vim
Plugin 'dsawardekar/portkey'
" a solid language pack
Plugin 'sheerun/vim-polyglot'

Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-endwise'
Plugin 'dsawardekar/ember.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

syntax enable

" causes issues when the syntax in the file contains mode line keywords
" so we disable it
set modelines=0

" Syntastic options
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0             " Don't check on open
let g:syntastic_check_on_wq = 0
let g:syntastic_html_tidy_exec = 'tidy5'      " Use HTML5
" fixes opening golang files with syntastic
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

colorscheme molokai

" No prompt for file changes outside Vim
set autoread

" Never let vim write a backup file
set nobackup
set noswapfile

" WhiteSpace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

au BufNewFile,BufReadPost *.md set filetype=markdown

au FileType vim               set shiftwidth=2 tabstop=2 expandtab
au FileType sh                set shiftwidth=2 tabstop=2 expandtab
au FileType eruby             set shiftwidth=2 tabstop=2 expandtab
au FileType html.handlebars   set shiftwidth=2 tabstop=2 expandtab
au FileType coffee            set shiftwidth=2 tabstop=2 expandtab
au FileType css               set shiftwidth=2 tabstop=2 expandtab
au FileType javascript        set shiftwidth=2 tabstop=2 expandtab
au FileType ruby              set shiftwidth=2 tabstop=2 expandtab
au FileType html              set shiftwidth=2 tabstop=2 expandtab
au FileType json              set shiftwidth=2 tabstop=2 expandtab
au FileType make              set noexpandtab shiftwidth=2 tabstop=2 syntax=nasm

" Go mappings
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)

" NERDTree
" Close vim if NERDTree is the only window left open
au bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeChDirMode=2

" White space madness
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call  clearmatches()
au BufWritePre * :call TrimWhiteSpace()

" Mappings
"
let mapleader = "," 						" Remap leader to ','
nnoremap <Leader>w :w<CR>
map <C-c> :NERDTreeToggle<CR>

" Insert Mode Maps
"
" ^F to insert file's name
imap <C-F> <C-R>=expand("%")<CR>

" Line numbers
set number
set numberwidth=4

" Airline Plugin
" let g:airline_section_b = '%{fugitive#statusline()}'
let g:airline#extensions#tabline#enabled = 1
" auto populates the powerline fonts.
" ensure powerline fonts are installed and iterm is using them as non ASCII
" font
let g:airline_powerline_fonts = 1
let g:airline_theme='powerlineish'

" SuperTab Completion Plugin
let g:SuperTabDefaultCompletionType = "context"

" vim-go
let g:go_fmt_command = "goimports"
" let g:go_highlight_functions = 1
" let g:go_highlight_methods = 1
" let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" Can't use this following option with goimports :(
" let g:go_fmt_options = "-s"

" vim-jsx
" See https://github.com/mxw/vim-jsx for options
" let g:jsx_ext_required = 0

autocmd InsertEnter,InsertLeave * set cul!
if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif
