set undofile
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

" ensure fzf is installed in homebrew
set rtp+=/usr/local/opt/fzf
let $FZF_DEFAULT_COMMAND='rg --files'

" ALE syntax checking
"" For JavaScript files, use `eslint` (and only eslint)
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ }

" Grepper
let g:grepper = {}
let g:grepper.tools = ['grep', 'git', 'rg']

" Vim-test
let test#strategy = "dispatch"

syntax enable

" causes issues when the syntax in the file contains mode line keywords
" so we disable it
set modelines=0

" Syntastic options
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

colorscheme molokai

" No prompt for file changes outside Vim
set autoread

" Never let vim write a backup file
set nobackup
set noswapfile

" WhiteSpace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

au BufNewFile,BufReadPost *.md set filetype=markdown

set expandtab
set shiftwidth=2
set softtabstop=2

au FileType make set noexpandtab shiftwidth=2 tabstop=2 syntax=nasm

" Go mappings
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)

" NERDTree
" Close vim if NERDTree is the only window left open
au bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeChDirMode=2

" White space madness
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call  clearmatches()
au BufWritePre * :call TrimWhiteSpace()

" Mappings
"
let mapleader = "," 						" Remap leader to ','
nnoremap <Leader>w :w<CR>
map <C-c> :NERDTreeToggle<CR>

"" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<CR>
"" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)
" Open Grepper-prompt for a particular Grep-alike tool
nnoremap <Leader>g :Grepper -tool git<CR>
nnoremap <Leader>G :Grepper -tool rg<CR>

"" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Terminal Mode Mappings
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif

nnoremap <M-h> <c-w>h
nnoremap <M-j> <c-w>j
nnoremap <M-k> <c-w>k
nnoremap <M-l> <c-w>l
" TODO: add insert and visual mode mappings
if has('nvim')
  tnoremap <M-h> <c-\><c-n><c-w>h
  tnoremap <M-j> <c-\><c-n><c-w>j
  tnoremap <M-k> <c-\><c-n><c-w>k
  tnoremap <M-l> <c-\><c-n><c-w>l
endif

" Insert Mode Maps
"
" ^F to insert file's name
imap <C-F> <C-R>=expand("%")<CR>

" Line numbers
set number
set numberwidth=4

" Airline Plugin
" let g:airline_section_b = '%{fugitive#statusline()}'
let g:airline#extensions#tabline#enabled = 1
" auto populates the powerline fonts.
" ensure powerline fonts are installed and iterm is using them as non ASCII
" font
let g:airline_powerline_fonts = 1
let g:airline_theme='powerlineish'

" SuperTab Completion Plugin
let g:SuperTabDefaultCompletionType = "context"

" vim-go
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
" let g:go_highlight_functions = 1
" let g:go_highlight_methods = 1
" let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" Can't use this following option with goimports :(
" let g:go_fmt_options = "-s"

" vim-jsx
" See https://github.com/mxw/vim-jsx for options
let g:jsx_ext_required = 0

autocmd BufNewFile,BufRead Envfile set filetype=ruby

autocmd InsertEnter,InsertLeave * set cul!
if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif
